; ModuleID = 'out'
source_filename = "out"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ObjHeader = type { %struct.TypeInfo* }
%struct.TypeInfo = type { %struct.TypeInfo*, %struct.ExtendedTypeInfo*, i32, i32, %struct.TypeInfo*, i32*, i32, %struct.TypeInfo**, i32, i32, %struct.InterfaceTableRecord*, %struct.ObjHeader*, %struct.ObjHeader*, i32, i32, %struct.AssociatedObjectTableRecord*, void (i8*, %struct.ObjHeader*)* }
%struct.ExtendedTypeInfo = type { i32, i32*, i8*, i8**, i32, i8** }
%struct.InterfaceTableRecord = type { i32, i32, i8** }
%struct.AssociatedObjectTableRecord = type { %struct.TypeInfo*, %struct.ObjHeader* (%struct.ObjHeader**)* }
%struct.ArrayHeader = type { %struct.TypeInfo*, i32 }
%class.ObjHolder = type { %struct.FrameOverlay.5, %struct.ObjHeader* }
%struct.FrameOverlay.5 = type { i8*, %struct.FrameOverlay.5*, i32, i32 }

@INT_CACHE = external global [256 x { %struct.ObjHeader, i32 }]
@"kclass:kotlin.Array" = external global %struct.TypeInfo
@0 = internal unnamed_addr constant { %struct.ArrayHeader, [5 x %struct.ObjHeader*] } { %struct.ArrayHeader { %struct.TypeInfo* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.TypeInfo* @"kclass:kotlin.Array" to i8*), i32 1) to %struct.TypeInfo*), i32 5 }, [5 x %struct.ObjHeader*] [%struct.ObjHeader* getelementptr inbounds ([256 x { %struct.ObjHeader, i32 }], [256 x { %struct.ObjHeader, i32 }]* @INT_CACHE, i32 0, i32 129, i32 0), %struct.ObjHeader* getelementptr inbounds ([256 x { %struct.ObjHeader, i32 }], [256 x { %struct.ObjHeader, i32 }]* @INT_CACHE, i32 0, i32 130, i32 0), %struct.ObjHeader* getelementptr inbounds ([256 x { %struct.ObjHeader, i32 }], [256 x { %struct.ObjHeader, i32 }]* @INT_CACHE, i32 0, i32 131, i32 0), %struct.ObjHeader* getelementptr inbounds ([256 x { %struct.ObjHeader, i32 }], [256 x { %struct.ObjHeader, i32 }]* @INT_CACHE, i32 0, i32 132, i32 0), %struct.ObjHeader* getelementptr inbounds ([256 x { %struct.ObjHeader, i32 }], [256 x { %struct.ObjHeader, i32 }]* @INT_CACHE, i32 0, i32 133, i32 0)] }
@"kclass:kotlin.text.StringBuilder" = external global %struct.TypeInfo
@"kclass:kotlin.String" = external global %struct.TypeInfo
@1 = internal unnamed_addr constant { %struct.ArrayHeader, [4 x i16] } { %struct.ArrayHeader { %struct.TypeInfo* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.TypeInfo* @"kclass:kotlin.String" to i8*), i32 1) to %struct.TypeInfo*), i32 4 }, [4 x i16] [i16 115, i16 117, i16 109, i16 61] }
@2 = internal unnamed_addr constant { %struct.ArrayHeader, [6 x i16] } { %struct.ArrayHeader { %struct.TypeInfo* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.TypeInfo* @"kclass:kotlin.String" to i8*), i32 1) to %struct.TypeInfo*), i32 6 }, [6 x i16] [i16 32, i16 116, i16 105, i16 109, i16 101, i16 61] }
@Kotlin_destroyRuntimeMode = hidden global i32 1
@Kotlin_gcMarkSingleThreaded = hidden global i32 0
@Kotlin_workerExceptionHandling = hidden global i32 1
@Kotlin_suspendFunctionsFromAnyThreadFromObjC = hidden global i32 0
@Kotlin_appStateTracking = hidden global i32 0
@Kotlin_mimallocUseDefaultOptions = hidden global i32 0
@Kotlin_mimallocUseCompaction = hidden global i32 0
@llvm.used = appending global [9 x i8*] [i8* bitcast (i32* @Kotlin_destroyRuntimeMode to i8*), i8* bitcast (i32* @Kotlin_gcMarkSingleThreaded to i8*), i8* bitcast (i32* @Kotlin_workerExceptionHandling to i8*), i8* bitcast (i32* @Kotlin_suspendFunctionsFromAnyThreadFromObjC to i8*), i8* bitcast (i32* @Kotlin_appStateTracking to i8*), i8* bitcast (i32* @Kotlin_mimallocUseDefaultOptions to i8*), i8* bitcast (i32* @Kotlin_mimallocUseCompaction to i8*), i8* bitcast (i32 (i32, i8**, i32)* @Init_and_run_start to i8*), i8* bitcast (i32 (i32, i8**)* @Konan_main to i8*)], section "llvm.metadata"
@_Konan_init_program_guard = private global i32 0
@llvm.global_ctors = appending dso_local global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 1, void ()* @_Konan_constructors, i8* null }]
@theArrayTypeInfo = external local_unnamed_addr global %struct.TypeInfo*, align 8

; Function Attrs: nounwind
declare %struct.ObjHeader* @AllocInstance(%struct.TypeInfo* %0, %struct.ObjHeader** %1) #0

declare %struct.ObjHeader* @AllocArrayInstance(%struct.TypeInfo* %0, i32 %1, %struct.ObjHeader** %2) #1

; Function Attrs: nounwind
declare void @UpdateHeapRef(%struct.ObjHeader** %0, %struct.ObjHeader* %1) #0

; Function Attrs: nounwind
declare void @EnterFrame(%struct.ObjHeader** %0, i32 %1, i32 %2) #0

; Function Attrs: nounwind
declare void @LeaveFrame(%struct.ObjHeader** %0, i32 %1, i32 %2) #0

; Function Attrs: nounwind
declare void @SetCurrentFrame(%struct.ObjHeader** %0) #0

; Function Attrs: nounwind
declare void @CheckCurrentFrame(%struct.ObjHeader** %0) #0

; Function Attrs: nounwind
declare void @Kotlin_initRuntimeIfNeeded() #0

; Function Attrs: nounwind
declare %struct.ObjHeader* @Kotlin_getExceptionObject(i8* %0, %struct.ObjHeader** %1) #0

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #3

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8* %0) #3

; Function Attrs: nounwind
declare void @__cxa_end_catch() #3

; Function Attrs: noinline
define internal void @"kfun:#main(){}"() #4 {
prologue:
  %sum = alloca i32, align 4
  %inductionVariable = alloca i32, align 4
  %0 = alloca %struct.ObjHeader*, i32 11, align 8
  %1 = bitcast %struct.ObjHeader** %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* nocapture writeonly %1, i8 0, i32 88, i1 immarg false) #2
  %2 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %0, i32 3
  %3 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %0, i32 4
  %4 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %0, i32 5
  %5 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %0, i32 6
  %6 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %0, i32 7
  %7 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %0, i32 8
  %8 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %0, i32 9
  %9 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %0, i32 10
  call void @EnterFrame(%struct.ObjHeader** %0, i32 0, i32 11) #10
  call void @Kotlin_mm_safePointFunctionPrologue() #10
  store i32 0, i32* %sum, align 4
  %10 = call %struct.ObjHeader* @"kfun:kotlin.collections#copyOf__at__kotlin.Array<0:0>(){0\C2\A7<kotlin.Any?>}kotlin.Array<0:0>"(%struct.ObjHeader* bitcast ({ %struct.ArrayHeader, [5 x %struct.ObjHeader*] }* @0 to %struct.ObjHeader*), %struct.ObjHeader** %2)
  %11 = call i64 @Kotlin_system_getTimeMillis()
  store i32 0, i32* %inductionVariable, align 4
  %12 = load i32, i32* %inductionVariable, align 4
  %13 = icmp slt i32 %12, 100000000
  br i1 %13, label %do_while_loop, label %returnable_block_exit10

do_while_loop:                                    ; preds = %prologue, %do_while_loop
  call void @Kotlin_mm_safePointWhileLoopBody() #10
  %14 = load i32, i32* %inductionVariable, align 4
  %15 = load i32, i32* %inductionVariable, align 4
  %16 = add i32 %15, 1
  store i32 %16, i32* %inductionVariable, align 4
  %17 = load i32, i32* %sum, align 4
  %18 = icmp eq i32 %14, -2147483648
  %19 = and i1 %18, false
  %20 = srem i32 %14, 5
  %21 = select i1 %19, i32 0, i32 %20
  %22 = call %struct.ObjHeader* @Kotlin_Array_get(%struct.ObjHeader* %10, i32 %21, %struct.ObjHeader** %3)
  %23 = call i32 @"kfun:kotlin#<Int-unbox>(kotlin.Any){}kotlin.Int"(%struct.ObjHeader* %22)
  %24 = add i32 %17, %23
  store i32 %24, i32* %sum, align 4
  %25 = load i32, i32* %inductionVariable, align 4
  %26 = icmp slt i32 %25, 100000000
  br i1 %26, label %do_while_loop, label %returnable_block_exit10

returnable_block_exit10:                          ; preds = %do_while_loop, %prologue
  %27 = call i64 @Kotlin_system_getTimeMillis()
  %28 = sub i64 %27, %11
  %29 = call %struct.ObjHeader* @AllocInstance(%struct.TypeInfo* @"kclass:kotlin.text.StringBuilder", %struct.ObjHeader** %4) #10
  call void @"kfun:kotlin.text.StringBuilder#<init>(){}"(%struct.ObjHeader* %29)
  %30 = call %struct.ObjHeader* @"kfun:kotlin.text.StringBuilder#append(kotlin.Any?){}kotlin.text.StringBuilder"(%struct.ObjHeader* %29, %struct.ObjHeader* bitcast ({ %struct.ArrayHeader, [4 x i16] }* @1 to %struct.ObjHeader*), %struct.ObjHeader** %5)
  %31 = load i32, i32* %sum, align 4
  %32 = call %struct.ObjHeader* @"kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder"(%struct.ObjHeader* %29, i32 %31, %struct.ObjHeader** %6)
  %33 = call %struct.ObjHeader* @"kfun:kotlin.text.StringBuilder#append(kotlin.Any?){}kotlin.text.StringBuilder"(%struct.ObjHeader* %29, %struct.ObjHeader* bitcast ({ %struct.ArrayHeader, [6 x i16] }* @2 to %struct.ObjHeader*), %struct.ObjHeader** %7)
  %34 = call %struct.ObjHeader* @"kfun:kotlin.text.StringBuilder#append(kotlin.Long){}kotlin.text.StringBuilder"(%struct.ObjHeader* %29, i64 %28, %struct.ObjHeader** %8)
  %35 = getelementptr inbounds %struct.ObjHeader, %struct.ObjHeader* %29, i32 0, i32 0
  %36 = load atomic %struct.TypeInfo*, %struct.TypeInfo** %35 monotonic, align 8
  %37 = ptrtoint %struct.TypeInfo* %36 to i64
  %38 = and i64 %37, -4
  %39 = inttoptr i64 %38 to %struct.TypeInfo*
  %40 = getelementptr inbounds %struct.TypeInfo, %struct.TypeInfo* %39, i32 0, i32 0
  %41 = load atomic %struct.TypeInfo*, %struct.TypeInfo** %40 monotonic, align 8
  %42 = getelementptr %struct.TypeInfo, %struct.TypeInfo* %41, i32 1
  %43 = bitcast %struct.TypeInfo* %42 to i8**
  %44 = getelementptr i8*, i8** %43, i32 2
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast i8* %45 to %struct.ObjHeader* (%struct.ObjHeader*, %struct.ObjHeader**)*
  %47 = call %struct.ObjHeader* %46(%struct.ObjHeader* %29, %struct.ObjHeader** %9)
  call void @Kotlin_io_Console_println(%struct.ObjHeader* %47)
  call void @LeaveFrame(%struct.ObjHeader** %0, i32 0, i32 11) #10
  ret void
}

define internal i32 @Konan_start(%struct.ObjHeader* nocapture readnone %0) #5 personality i32 (...)* @__gxx_personality_v0 {
prologue:
  %1 = alloca %struct.ObjHeader*, i32 4, align 8
  %2 = bitcast %struct.ObjHeader** %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* nocapture writeonly %2, i8 0, i32 32, i1 immarg false) #2
  %3 = getelementptr %struct.ObjHeader*, %struct.ObjHeader** %1, i32 3
  call void @EnterFrame(%struct.ObjHeader** %1, i32 0, i32 4) #10
  call void @Kotlin_mm_safePointFunctionPrologue() #10
  invoke void @"kfun:#main(){}"() #11
          to label %epilogue unwind label %landingpad

landingpad:                                       ; preds = %prologue
  %lp = landingpad { i8*, i32 }
          catch i8* null
  call void @SetCurrentFrame(%struct.ObjHeader** %1) #10
  %er = extractvalue { i8*, i32 } %lp, 0
  %4 = call i8* @__cxa_begin_catch(i8* %er) #10
  %5 = call %struct.ObjHeader* @Kotlin_getExceptionObject(i8* %4, %struct.ObjHeader** %3) #10
  call void @__cxa_end_catch() #10
  call void @CheckCurrentFrame(%struct.ObjHeader** %1) #10
  invoke void @Kotlin_processUnhandledException(%struct.ObjHeader* %5)
          to label %call_success unwind label %cleanup_landingpad

call_success:                                     ; preds = %landingpad
  invoke void @Kotlin_terminateWithUnhandledException(%struct.ObjHeader* %5) #12
          to label %call_success2 unwind label %cleanup_landingpad

call_success2:                                    ; preds = %call_success
  unreachable

epilogue:                                         ; preds = %prologue
  %6 = phi i32 [ 0, %prologue ]
  call void @LeaveFrame(%struct.ObjHeader** %1, i32 0, i32 4) #10
  ret i32 %6

cleanup_landingpad:                               ; preds = %call_success, %landingpad
  %7 = landingpad { i8*, i32 }
          cleanup
  call void @SetCurrentFrame(%struct.ObjHeader** %1) #10
  call void @LeaveFrame(%struct.ObjHeader** %1, i32 0, i32 4) #10
  resume { i8*, i32 } %7
}

declare %struct.ObjHeader* @"kfun:kotlin.collections#copyOf__at__kotlin.Array<0:0>(){0\C2\A7<kotlin.Any?>}kotlin.Array<0:0>"(%struct.ObjHeader* %0, %struct.ObjHeader** %1) #5

declare i64 @Kotlin_system_getTimeMillis() #5

; Function Attrs: nounwind
declare void @Kotlin_mm_safePointWhileLoopBody() #0

declare %struct.ObjHeader* @Kotlin_Array_get(%struct.ObjHeader* %0, i32 %1, %struct.ObjHeader** %2) #5

declare i32 @"kfun:kotlin#<Int-unbox>(kotlin.Any){}kotlin.Int"(%struct.ObjHeader* %0) #5

declare void @"kfun:kotlin.text.StringBuilder#<init>(){}"(%struct.ObjHeader* %0) #5

declare %struct.ObjHeader* @"kfun:kotlin.text.StringBuilder#append(kotlin.Any?){}kotlin.text.StringBuilder"(%struct.ObjHeader* %0, %struct.ObjHeader* %1, %struct.ObjHeader** %2) #5

declare %struct.ObjHeader* @"kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder"(%struct.ObjHeader* %0, i32 %1, %struct.ObjHeader** %2) #5

declare %struct.ObjHeader* @"kfun:kotlin.text.StringBuilder#append(kotlin.Long){}kotlin.text.StringBuilder"(%struct.ObjHeader* %0, i64 %1, %struct.ObjHeader** %2) #5

declare void @Kotlin_io_Console_println(%struct.ObjHeader* %0) #5

; Function Attrs: nounwind
declare void @Kotlin_mm_safePointFunctionPrologue() #0

declare void @Kotlin_processUnhandledException(%struct.ObjHeader* %0) #5

; Function Attrs: noreturn
declare void @Kotlin_terminateWithUnhandledException(%struct.ObjHeader* %0) #6

declare void @_Konan_init_stdlib() #5

; Function Attrs: nofree norecurse nounwind
define internal void @_Konan_init_program() #7 {
prologue:
  %0 = load i32, i32* @_Konan_init_program_guard, align 4
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %need_init, label %epilogue

need_init:                                        ; preds = %prologue
  store i32 1, i32* @_Konan_init_program_guard, align 4
  br label %epilogue

epilogue:                                         ; preds = %prologue, %need_init
  ret void
}

define internal void @_Konan_constructors() #5 {
prologue:
  call void @_Konan_init_stdlib()
  call void @_Konan_init_program()
  ret void
}

; Function Attrs: uwtable
define i32 @Init_and_run_start(i32 %0, i8** nocapture readonly %1, i32 %2) #8 personality i32 (...)* @__gxx_personality_v0 {
  %4 = alloca %class.ObjHolder, align 8
  tail call void @Kotlin_initRuntimeIfNeeded() #10
  tail call void @Kotlin_mm_switchThreadStateRunnable() #10
  %5 = bitcast %class.ObjHolder* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #10
  %6 = getelementptr inbounds %class.ObjHolder, %class.ObjHolder* %4, i64 0, i32 1
  store %struct.ObjHeader* null, %struct.ObjHeader** %6, align 8, !tbaa !3
  %7 = bitcast %class.ObjHolder* %4 to %struct.ObjHeader**
  call void @EnterFrame(%struct.ObjHeader** nonnull %7, i32 0, i32 4) #10
  %8 = invoke %struct.ObjHeader* @_Z9setupArgsiPPKcPP9ObjHeader(i32 %0, i8** %1, %struct.ObjHeader** nonnull %6)
          to label %9 unwind label %12

9:                                                ; preds = %3
  %10 = load %struct.ObjHeader*, %struct.ObjHeader** %6, align 8, !tbaa !3
  %11 = invoke i32 @Konan_start(%struct.ObjHeader* %10)
          to label %14 unwind label %12

12:                                               ; preds = %9, %3
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @LeaveFrame(%struct.ObjHeader** nonnull %7, i32 0, i32 4) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #10
  resume { i8*, i32 } %13

14:                                               ; preds = %9
  call void @LeaveFrame(%struct.ObjHeader** nonnull %7, i32 0, i32 4) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #10
  %15 = icmp eq i32 %2, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  call void @Kotlin_shutdownRuntime()
  br label %17

17:                                               ; preds = %14, %16
  ret i32 %11
}

; Function Attrs: uwtable
define i32 @Konan_main(i32 %0, i8** nocapture readonly %1) #8 {
  %3 = tail call i32 @Init_and_run_start(i32 %0, i8** %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
declare void @Kotlin_mm_switchThreadStateRunnable() local_unnamed_addr #0

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #9

; Function Attrs: uwtable
define internal %struct.ObjHeader* @_Z9setupArgsiPPKcPP9ObjHeader(i32 %0, i8** nocapture readonly %1, %struct.ObjHeader** %2) local_unnamed_addr #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca %class.ObjHolder, align 8
  %5 = load %struct.TypeInfo*, %struct.TypeInfo** @theArrayTypeInfo, align 8, !tbaa !10
  %6 = add nsw i32 %0, -1
  %7 = tail call %struct.ObjHeader* @AllocArrayInstance(%struct.TypeInfo* %5, i32 %6, %struct.ObjHeader** %2)
  %8 = icmp sgt i32 %0, 1
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = bitcast %class.ObjHolder* %4 to i8*
  %11 = getelementptr inbounds %class.ObjHolder, %class.ObjHolder* %4, i64 0, i32 1
  %12 = bitcast %class.ObjHolder* %4 to %struct.ObjHeader**
  %13 = getelementptr inbounds %struct.ObjHeader, %struct.ObjHeader* %7, i64 2
  %14 = zext i32 %0 to i64
  br label %16

15:                                               ; preds = %21, %3
  ret %struct.ObjHeader* %7

16:                                               ; preds = %21, %9
  %17 = phi i64 [ 1, %9 ], [ %26, %21 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #10
  store %struct.ObjHeader* null, %struct.ObjHeader** %11, align 8, !tbaa !3
  call void @EnterFrame(%struct.ObjHeader** nonnull %12, i32 0, i32 4) #10
  %18 = getelementptr inbounds i8*, i8** %1, i64 %17
  %19 = load i8*, i8** %18, align 8, !tbaa !10
  %20 = invoke %struct.ObjHeader* @CreateStringFromCString(i8* %19, %struct.ObjHeader** nonnull %11)
          to label %21 unwind label %28

21:                                               ; preds = %16
  %22 = add nsw i64 %17, -1
  %23 = getelementptr inbounds %struct.ObjHeader, %struct.ObjHeader* %13, i64 %22
  %24 = bitcast %struct.ObjHeader* %23 to %struct.ObjHeader**
  %25 = load %struct.ObjHeader*, %struct.ObjHeader** %11, align 8, !tbaa !3
  call void @UpdateHeapRef(%struct.ObjHeader** nonnull %24, %struct.ObjHeader* %25) #10
  call void @LeaveFrame(%struct.ObjHeader** nonnull %12, i32 0, i32 4) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #10
  %26 = add nuw nsw i64 %17, 1
  %27 = icmp eq i64 %26, %14
  br i1 %27, label %15, label %16

28:                                               ; preds = %16
  %29 = landingpad { i8*, i32 }
          cleanup
  call void @LeaveFrame(%struct.ObjHeader** nonnull %12, i32 0, i32 4) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #10
  resume { i8*, i32 } %29
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #9

declare void @Kotlin_shutdownRuntime() local_unnamed_addr #1

declare %struct.ObjHeader* @CreateStringFromCString(i8* %0, %struct.ObjHeader** %1) local_unnamed_addr #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #4 = { noinline "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #5 = { "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #6 = { noreturn "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #7 = { nofree norecurse nounwind "frame-pointer"="all" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #8 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nounwind willreturn }
attributes #10 = { nounwind }
attributes #11 = { noinline }
attributes #12 = { noreturn }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 11.1.0 (https://github.com/llvm/llvm-project 1fdec59bffc11ae37eb51a1b9869f0696bfd5312)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!4, !6, i64 24}
!4 = !{!"_ZTS9ObjHolder", !5, i64 0, !6, i64 24}
!5 = !{!"_ZTS12FrameOverlay", !6, i64 0, !6, i64 8, !9, i64 16, !9, i64 20}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!6, !6, i64 0}
